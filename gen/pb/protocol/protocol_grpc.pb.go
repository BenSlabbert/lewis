// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LewisServiceClient is the client API for LewisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LewisServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (LewisService_ReadClient, error)
}

type lewisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLewisServiceClient(cc grpc.ClientConnInterface) LewisServiceClient {
	return &lewisServiceClient{cc}
}

func (c *lewisServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/protocol_pb.LewisService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lewisServiceClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/protocol_pb.LewisService/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lewisServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (LewisService_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &LewisService_ServiceDesc.Streams[0], "/protocol_pb.LewisService/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &lewisServiceReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LewisService_ReadClient interface {
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type lewisServiceReadClient struct {
	grpc.ClientStream
}

func (x *lewisServiceReadClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LewisServiceServer is the server API for LewisService service.
// All implementations should embed UnimplementedLewisServiceServer
// for forward compatibility
type LewisServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	Read(*ReadRequest, LewisService_ReadServer) error
}

// UnimplementedLewisServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLewisServiceServer struct {
}

func (UnimplementedLewisServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLewisServiceServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedLewisServiceServer) Read(*ReadRequest, LewisService_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}

// UnsafeLewisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LewisServiceServer will
// result in compilation errors.
type UnsafeLewisServiceServer interface {
	mustEmbedUnimplementedLewisServiceServer()
}

func RegisterLewisServiceServer(s grpc.ServiceRegistrar, srv LewisServiceServer) {
	s.RegisterService(&LewisService_ServiceDesc, srv)
}

func _LewisService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LewisServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol_pb.LewisService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LewisServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LewisService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LewisServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol_pb.LewisService/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LewisServiceServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LewisService_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LewisServiceServer).Read(m, &lewisServiceReadServer{stream})
}

type LewisService_ReadServer interface {
	Send(*ReadResponse) error
	grpc.ServerStream
}

type lewisServiceReadServer struct {
	grpc.ServerStream
}

func (x *lewisServiceReadServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// LewisService_ServiceDesc is the grpc.ServiceDesc for LewisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LewisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol_pb.LewisService",
	HandlerType: (*LewisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _LewisService_Login_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _LewisService_Write_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _LewisService_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/protocol/protocol.proto",
}
